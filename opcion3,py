import re
import fitz  # PyMuPDF
import pandas as pd
import os
#basura = """Abreviaturas utilizadas: HAB=Habilitación, VAL=Validación por Pérdida, SUF=Validación por Suficiencia, HAP=Horas de Actividad Presencial, HAI=Horas de Actividad\n Independiente, THS=Total Horas Semanales, HOM=Homologada o Convalidada.\nSI*: Cancelación por decisión de la universidad soportada en acuerdos, resoluciones y actos académicos\nEste es un documento de uso interno de la Universidad Nacional de Colombia. No constituye, ni reemplaza el certificado oficial de notas. Informe generado por el usuario:jabuitragoga el """
#basura_dict = {i: linea for i, linea in enumerate(basura.split('\n'))}#
#print(basura_dict)

basura ={0:'Abreviaturas utilizadas: HAB=Habilitación, VAL=Validación por Pérdida, SUF=Validación por Suficiencia, HAP=Horas de Actividad Presencial, HAI=Horas de Actividad',
         1:'Independiente, THS=Total Horas Semanales, HOM=Homologada o Convalidada.',
         2:'SI*: Cancelación por decisión de la universidad soportada en acuerdos, resoluciones y actos académicos',
         3:'Este es un documento de uso interno de la Universidad Nacional de Colombia. No constituye, ni reemplaza el certificado oficial de notas.',
         4:'Informe generado por el usuario:',
         5:'Reporte de Historia Académica',
         6:'Sistema de Información Académica',
         7:'Dirección Nacional de Información Académica',
         8:'Registro y Matrícula'}

# Ruta a la carpeta con los PDFs
CARPETA_PDFS = "/home/jugalindog/Pasantia/Curricular/Historial_Academica"
datos = []

for archivo in os.listdir(CARPETA_PDFS):
    if not archivo.endswith(".pdf"):
        continue

    ruta_pdf = os.path.join(CARPETA_PDFS, archivo)
    try:
        doc = fitz.open(ruta_pdf)
        texto = "\n".join([page.get_text() for page in doc])
        doc.close()
            # Expresión regular para eliminar el segmento variable de usuario, fecha y página
        
        texto = re.sub(
        r"Informe generado por el usuario:\s+\S+\s+el\s+\w+\s+\d{1,2}\s+de\s+\w+\s+de\s+\d{4}\s+\d{2}:\d{2}",
        '',  # Reemplazar con una cadena vacía
        texto)
        texto = re.sub(r'Página\xa0\d+\xa0de\xa0\d+', '', texto)




        # Eliminar el texto de la variable 'basura' del contenido extraído del PDF
        for key, basura in basura.items():
            if basura in texto:
                #print(f"Eliminando: {basura}")
                #print(f"Texto original: {texto}")
                # Reemplazar el texto de basura por una cadena vacía
                #print(f"Texto antes: {texto}")
                texto = texto.replace(basura, '')



    except Exception as e:
        print(f"Error con {archivo}: {e}")
        continue

    # Extraer nombre y documento del estudiante
    nombre_match = re.search(r'Nombre:\s*(.+)', texto)
    documento_match = re.search(r'Documento:\s*(\d+)', texto)
    if not nombre_match or not documento_match:
        continue

    nombre = nombre_match.group(1).strip()
    documento = documento_match.group(1).strip()

    # Dividir por semestres
    bloques = re.split(r'(?:PRIMER|SEGUNDO)\s+PERIODO\s+(\d{4}-[12]S)', texto)
    #print(bloques)
    # print("Bloques encontrados:", len(bloques))
    # print()
    for i in range(1, len(bloques), 2):
        semestre = bloques[i]
        contenido = bloques[i + 1]
        lineas = contenido.splitlines()
        lineas = [l.strip() for l in lineas if l.strip()]

        
        
        j = 0
        while j < len(lineas):
            linea = lineas[j].strip()
            #print(lineas) 
            # Detectar asignatura con su código al final entre paréntesis
            match_asig = re.search(r'(.+?)\s*\((\d{6,7}(?:-B)?)\)', linea)

            #print(match_asig)
            if match_asig:
                nombre_asig = match_asig.group(1).strip()
                codigo = match_asig.group(2).strip()
                tipo_asig = ''
                nota = ''
                estado = 'Reprobada'
                anulada = 'NO'

                j += 1
                while j < len(lineas):
                    l = lineas[j].strip()
                    # print(l)
                    # Si encontramos otra asignatura, salimos
                    if re.search(r'(.+?)\s*\((\d{6,7}(?:-B)?)\)', l):
                        j -= 1
                        break

                    # Detectar nota y estado
                    if re.search(r'(Aprobada|Reprobada|SI\*)', l):
                        nota_match = re.search(r'([\d,\.]+)', l)
                        if nota_match:
                            nota = nota_match.group(1).replace(',', '.')
                        estado = 'Aprobada' if 'Aprobada' in l else 'Reprobada'

                    # Detectar si está anulada
                    if 'Anulada' in l or 'SI' in l:
                        anulada = 'SI'

                    # Detectar tipo de asignatura
                    elif any(t in l for t in ['Obligatoria', 'Optativa', 'Libre Elección', 'Nivelación']):
                        tipo_asig = l

                    j += 1

                # Agregar registro
                datos.append({
                    'nombre': nombre,
                    'documento': documento,
                    'codigo_asignatura': codigo,
                    'asignatura': nombre_asig,
                    'tipo_asignatura': tipo_asig,
                    'nota': float(nota) if nota.replace('.', '', 1).isdigit() else 0.0,
                    'estado': estado,
                    'anulada': anulada,
                    'semestre_inicio': '2018-2S',
                    'semestre_asignatura': semestre
                })

            j += 1

# Exportar a Excel
df = pd.DataFrame(datos)
df.to_excel("historia_academica_robusta_final.xlsx", index=False)
print("✅ Archivo listo: historia_academica_robusta_final.xlsx")
