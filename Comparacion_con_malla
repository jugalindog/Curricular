# --- Importación de librerías ---
import re
import fitz  # PyMuPDF
import pandas as pd
import os

# Diccionario con texto basura típico de los PDFs que debe ser eliminado
basura = {
    0: 'Abreviaturas utilizadas: HAB=Habilitación, VAL=Validación por Pérdida, SUF=Validación por Suficiencia, HAP=Horas de Actividad Presencial, HAI=Horas de Actividad',
    1: 'Independiente, THS=Total Horas Semanales, HOM=Homologada o Convalidada.',
    2: 'SI*: Cancelación por decisión de la universidad soportada en acuerdos, resoluciones y actos académicos',
    3: 'Este es un documento de uso interno de la Universidad Nacional de Colombia. No constituye, ni reemplaza el certificado oficial de notas.',
    4: 'Informe generado por el usuario:',
    5: 'Reporte de Historia Académica',
    6: 'Sistema de Información Académica',
    7: 'Dirección Nacional de Información Académica',
    8: 'Registro y Matrícula'
}

# Diccionario de malla curricular para clasificación por semestre (puedes actualizarlo con más asignaturas)
malla_curricular = {
    "Introducción a la ingeniería agronómica": 1,
    "Matemáticas Básicas": 1,
    "Biología de plantas": 1,
    "Lecto-Escritura": 1,
    "Química básica": 1,
    "Cálculo diferencial": 1,

    "Cálculo Integral": 2,
    "Fundamentos de mecánica": 2,
    "Botánica taxonómica": 2,
    "Laboratorio de química básica": 2,

    "Ciencia del suelo": 3,
    "Laboratorio bioquímica básica": 3,
    "Bioquímica básica": 3,
    "Bioestadística fundamental": 3,
    "Geomática básica": 3,

    "Agroclimatología": 4,
    "Edafología": 4,
    "Fundamentos de ecología": 4,
    "Microbiología": 4,
    "Biología Celular y Molecular Básica": 4,
    "Diseño de experimentos": 4,


    "Sociología Rural": 5,
    "Riegos y drenajes": 5,
    "Mecanización agrícola": 5,
    "Génetica general": 5,
    "Fisiología vegetal básica": 5,
    
    "Economía agraria": 6,
    "Entomología": 6,
    "Fitopatología": 6,
    "Fisiología de la producción vegetal": 6,
    "Reproducción y multiplicación": 6,
    
    "Gestión agroempresarial": 7,
    "Manejo de la fertilidad del suelo": 7,
    "Manejo integrado de plagas": 7,
    "Manejo Integrado de Enfermedades": 7,
    "Manejo integrado de malezas": 7,

    "Ciclo i: formulación y evaluación de proyect": 8,
    "Fitomejoramiento": 8,
    "Agroecosistemas y Sistemas de Producción": 8,
    "Tecnología de la Poscosecha": 8,

    "Ciclo  II: Ejecución de un proyecto productiv": 9,
    "Produccion de cultivos de clima calido": 9,
    "Producción de frutales": 9,
    "Producción de hortalizas": 9,
    "Producción de ornamentales": 9,
    "Cultivos perennes industriales": 9,
    "Producción de papa": 9,
    
    
    "Práctica Profesional": 10,
    "Trabajo de Grado": 10
}

# Lista de asignaturas consideradas como optativas de producción
optativas_produccion = [
    "Produccion de cultivos de clima calido",
    "Producción de frutales",
    "Produccion de hortalizas",
    "Producción de ornamentales",
    "Cultivos perennes industriales",
    "Producción de papa"
]

CARPETA_PDFS = "C:\\Users\\jp2g\\Documents\\PASANTIA\\Curricular\\Curricular\\Historial_Academica"
datos = []

# --- Procesamiento de archivos PDF ---
for archivo in os.listdir(CARPETA_PDFS):
    if not archivo.endswith(".pdf"):
        continue

    ruta_pdf = os.path.join(CARPETA_PDFS, archivo)
    try:
        doc = fitz.open(ruta_pdf)
        texto = "\n".join([page.get_text() for page in doc])
        doc.close()

        texto = re.sub(
            r"Informe generado por el usuario:\s+\S+\s+el\s+\w+\s+\d{1,2}\s+de\s+\w+\s+de\s+\d{4}\s+\d{2}:\d{2}",
            '', texto)
        texto = re.sub(r'Página\xa0\d+\xa0de\xa0\d+', '', texto)
        texto = re.sub(r'\n?[A-ZÁÉÍÓÚÑ][^\n]+\s+-\s+\d{7,10}', '', texto)

        for b in basura.values():
            texto = texto.replace(b, '')

    except Exception as e:
        print(f"Error con {archivo}: {e}")
        continue

    nombre_match = re.search(r'Nombre:\s*(.+)', texto)
    documento_match = re.search(r'Documento:\s*(\d+)', texto)
    if not nombre_match or not documento_match:
        continue

    nombre = nombre_match.group(1).strip()
    documento = documento_match.group(1).strip()

    bloques = re.split(r'(?:PRIMER|SEGUNDO)\s+PERIODO\s+(\d{4}-[12]S)', texto)

    for i in range(1, len(bloques), 2):
        semestre = bloques[i]
        contenido = bloques[i + 1]
        lineas = [l.strip() for l in contenido.splitlines() if l.strip()]

        lineas_unidas = []
        j = 0
        while j < len(lineas):
            actual = lineas[j].strip()
            match_codigo = None
            codigo = None

            if re.fullmatch(r'\((\d{6,7}(?:-B)?)\)', actual):
                codigo = re.findall(r'\((\d{6,7}(?:-B)?)\)', actual)[0]
                if j > 0:
                    nombre_candidato = lineas[j - 1].strip()
                    encabezado_claves = ['asignatura', 'créditos', 'hap', 'hai', 'ths', 'tipología', 'calificación', 'anulada', 'n. veces']
                    if not any(p in nombre_candidato.lower() for p in encabezado_claves):
                        match_codigo = re.match(r'(.+)', nombre_candidato)
                        actual = f"{nombre_candidato} ({codigo})"
                        j += 1
            elif re.search(r'(.+)\s\((\d{6,7}(?:-B)?)\)$', actual):
                match_codigo = re.search(r'(.+)\s\((\d{6,7}(?:-B)?)\)$', actual)
                codigo = match_codigo.group(2)

            if match_codigo:
                texto_previo = match_codigo.group(1).lower()
                encabezado_claves = ['asignatura', 'créditos', 'hap', 'hai', 'ths', 'tipología', 'calificación', 'anulada', 'n. veces']

                if any(p in texto_previo for p in encabezado_claves):
                    lineas_unidas.append(actual)
                else:
                    nombre_final = match_codigo.group(1).strip()
                    nombre_partes = [nombre_final]
                    k = j - 1
                    while k >= 0:
                        anterior = lineas[k].strip().lower()
                        if re.fullmatch(r'\d+', anterior):
                            break
                        if any(p in anterior for p in encabezado_claves):
                            break
                        nombre_partes.insert(0, lineas[k].strip())
                        k -= 1
                    nombre_completo = " ".join(nombre_partes) + f" ({codigo})"
                    lineas_unidas = lineas_unidas[:k + 1]
                    lineas_unidas.append(nombre_completo)
            else:
                lineas_unidas.append(actual)
            j += 1

        j = 0
        while j < len(lineas_unidas):
            linea = lineas_unidas[j]
            match_asig = re.search(r'(.+?)\s*\((\d{6,7}(?:-B)?)\)', linea)
            if match_asig:
                nombre_asig = match_asig.group(1).strip()
                codigo = match_asig.group(2).strip()
                tipo_asig = ''
                nota = ''
                estado = 'Reprobada'
                anulada = 'NO'

                for tipop in ['Obligatoria (C)', 'Fund. Obligatoria', 'Fund. Optativa', 'Disciplinar', 'Libre Elección (L)', 'Nivelación (E)', 'Optativa (T)']:
                    if tipop in nombre_asig:
                        tipo_asig = tipop
                        nombre_asig = nombre_asig.replace(tipop, '').strip()
                        break

                detalles = []
                j += 1
                while j < len(lineas_unidas):
                    siguiente = lineas_unidas[j].strip()
                    if re.search(r'(.+?)\s*\((\d{6,7}(?:-B)?)\)', siguiente):
                        j -= 1
                        break
                    detalles.append(siguiente)
                    j += 1

                for detalle in detalles:
                    if re.search(r'(Aprobada|Reprobada|SI\*)', detalle):
                        nota_match = re.search(r'([\d,\.]+)', detalle)
                        if nota_match:
                            nota = nota_match.group(1).replace(',', '.')
                        estado = 'Aprobada' if 'Aprobada' in detalle else 'Reprobada'
                    if 'Anulada' in detalle or 'SI' in detalle:
                        anulada = 'SI'
                    if any(t in detalle for t in ['Obligatoria', 'Optativa', 'Libre Elección', 'Nivelación']):
                        tipo_asig = detalle

                 # Clasificación según la malla curricular
                semestre_malla = malla_curricular.get(nombre_asig, 'Libre Elección')

                # Asignación de tipo según nombre exacto
                if nombre_asig in optativas_produccion:
                    tipo_asig = 'Optativa de producción (C)'
                elif semestre_malla == 'Libre Elección':
                    tipo_asig = 'Libre Elección (L)'


                datos.append({
                    'nombre': nombre,
                    'documento': documento,
                    'codigo_asignatura': codigo,
                    'asignatura': nombre_asig,
                    'tipo_asignatura': tipo_asig,
                    'semestre_malla': semestre_malla,
                    'nota': float(nota) if nota.replace('.', '', 1).isdigit() else 0.0,
                    'estado': estado,
                    'anulada': anulada,
                    'semestre_inicio': '2018-2S',
                    'semestre_asignatura': semestre
                })
            j += 1

# Exportar resultado a Excel
df = pd.DataFrame(datos)
df.to_excel("Comparacion_malla.xlsx", index=False)
print("✅ Archivo listo: H_A_R_op8_clasificado.xlsx")
